openapi: 3.0.0
info:
  version: 1.0.0
  title: Pipe Fitting Webshop API
  description: A way to buy polyetilen pipe fittings easily
servers:
  - url: http://localhost:3000/api
paths:
  /login:
    post:
      description: Send logindata - logging in
      tags: 
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: Customer datas returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  customer:
                    type: object
                    $ref: '#/components/schemas/Customer'
                  refreshToken:
                    type: string
        '400':
          description: Missing email or password or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /refresh:
    post:
      description: Refreshing expired accessToken
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Returns new accesstoken
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                required:
                  - accessToken
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /logout:
    post:
      description: User logout
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required:
                - refreshToken
      responses:
        '200':
          description: Remove refreshtoken from database
          content:
            application/json:
              schema:
                type: object
                properties:
                  ...
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /registration:
    post:
      description: New user registration
      tags:
        - Registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Save new user, returns empty object
          content:
            application/json:
              schema:
                type: object
                properties:
                  ...
        '400':
          description: Invalid customer format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Already registered before
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /customer:
    get:
      description: Return userdata
      security:
        - bearerAuth: []
      tags:
        - Customer
      responses:
        '200':
          description: Returns userdata object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer_payload'
        '404':
          description: Not registered user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /customer/{customer_id}:
    put:
      description: Modify a user with the given ID
      security:
        - bearerAuth: []
      tags: 
        - Customer
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Returns the updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid customer format or id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not registered user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /product:
    get:
      description: Return products by given amount
      tags: 
        - Product
      parameters:
        - name: volume
          in: query
          required: true
          schema:
            type: integer
          description: The number of items to skip before starting to collect data
      responses:
        '200':
          description: Returns a list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
                required:
                  - items
        '404':
          description: No more items in database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /order:
    get:
      description: Return orders of user
      security:
        - bearerAuth: []
      tags:
        - Order
      responses:
        '200':
          description: Returns list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /order/{customer_id}:
    post:
      description: Create new order
      security:
        - bearerAuth: []
      tags:
        - Order
      parameters:
        - name: customer_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deliveryAddress:
                  type: string
                paidAmount:
                  type: integer
              required:
                - deliveryAddress
                - paidAmount
      responses:
        '201':
          description: Save new order, returns empty object
          content:
            application/json:
              schema:
                type: object
                properties:
                  ...
        '400':
          description: Invalid order format or user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found, maybe not registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /order/{order_id}:
    delete:
      description: Disband order
      security:
        - bearerAuth: []
      tags:
        - Order
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Order deleted, returns empty object
          content:
            application/json:
              schema:
                type: object
                properties:
                  ...
        '400':
          description: Invalid order ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Non-existent order or invalid user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Database error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      required:
        - lastName
        - firstName
        - address
        - email
        - password
      properties:
        lastName:
          type: string
        firstName:
          type: string
        address:
          type: string
        email:
          type: string
        password:
          type: string
    Customer:
      type: object
      required:
        - _id
        - lastName
        - firstName
        - address
        - email
        - orders
      properties:
        _id:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        address:
          type: string
        email:
          type: string
        orders:
          type: array
          items:
            type: string
    Customer_payload:
      type: object
      required:
        - _id
        - lastName
        - firstName
        - address
        - email
        - orders
        - iat
        - exp
      properties:
        _id:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        address:
          type: string
        email:
          type: string
        orders:
          type: array
          items:
            type: string
        iat:
          type: integer
        exp:
          type: integer
    Product:
      type: object
      required:
        - _id
        - name
        - manufacturer
        - weldTech
        - price
        - imageUrl
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
        name:
          type: string
        manufacturer:
          type: string
        weldTech:
          type: string
        price:
          type: integer
        imageUrl:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    Order:
      type: object
      required:
        - _id
        - number
        - date
        - deliveryAddress
        - paidAmount
        - customer
        - createdAt
        - updatedAt
      properties:
        _id:
          type: string
        number:
          type: integer
        date:
          type: string
        deliveryAddress:
          type: string
        paidAmount:
          type: integer
        customer:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string